{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red164\green8\blue0;\red63\green105\blue30;\red77\green77\blue77;
}
\margl1440\margr1440\vieww17300\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Algorithm Outline  \cf2 (dated) rewrite this!\cf0 \
1) remove bad chars that can't really mean anything\
"
\f1\fs22 \CocoaLigature0 \\n\\t,\\"':![]\{\}?!#<>"\
\
2) Split words if they contain a number and a work IE -10.34E10 Meters becomes -10.34E10 Meters\
\
3) Removes words that don't have any real meaning \
\pard\tx529\pardeftab529\pardirnatural
\cf0 'convert', 'converted','to', 'from', 'what', 'is', 'in', 'how', 'many', 'much','conversion','measured'\
\
###IMPORTANT 'in' can mean inches or the word in\
\
###IMPORTANT 'a' can mean one or just be a removable word\
\
4) Format numbers in 10E10 or 10e10 or 10^10 or -10.234E-0.342\
\
5) Look for the word 'per' and determine its usage case\
# "meters per mile" \
# "10 meters per second in miles per hour"\
# things including per to be handeled\
# "acres per 23 square feet"\
# "megastones per 23kilograms"\
# "23 miles/hr measured in marathons per fortnight"\
# "23 miles per hour in marathons per fortnight"\
# "miles per km"\
# "Meters per 10ft"\
\
6) Standardize unit names.\
\
7) Formats input for pass off to conversion engine.\
\
#Start by making a class library\
\
>>> class C:\
	def method(asd):\
		return asd\
\
	\
>>> C.method("asdDSFasdfasd")\
'asdDSFasdfasd'\
\
a) to detect if it is a usable number\
includes "-234.234^(-234.43)", "10e10", "3432.23", \
\
b) to detect if word is in the unit list\
\cf3 ========================================================\
========================================================\cf0 \
\
Fall 2013, Project Update:\
\
	Reevaluate project standing and complete programming of the backend engine FIRST!\
		Then work on the front end of natural language parsing\
\
	Needed support for higher level units such as foot-pounds and btus\
\
	May want to add common spelling error and mistyping correction.  Nice side project :)\
		{\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Wikipedia:Lists_of_common_misspellings/For_machines"}}{\fldrslt http://en.wikipedia.org/wiki/Wikipedia:Lists_of_common_misspellings/For_machines}} handy\
\
	When complete start a GitHub Project and a website to show off.\
\
Charistricts of a usable programme \
\
next thing to do with language: \
\cf4 \
  \{\
    "seperate_list": "['23.0', 'squarefeet', 'in', 'acres']", \
    "analyze_str": "[number];[unknown];[unit, phrasing word];[unknown]", \
    "input_string": "23squarefeet in acres"\
  \}, \
  \{\
    "seperate_list": "['23.0', 'kilograms', 'in', 'megastone']", \
    "analyze_str": "[number];[unknown];[unit, phrasing word];[unknown]", \
    "input_string": "23kilograms in megastone"\
  \}, \cf0 \
\
the unknowns can be broken apart into square feet and kilo grams!\
\cf2 i think this works now, but there are now "unit with prefix" and "prefix" "unit"\
	should be combined\
"unit" "per" "unit" should also be combined into "complex unit"\
i am really not sure if this is the best way of going about this yet\'85\
seriously 
\f2\b make the backend first!  
\f1\b0 it will dictate how the front end needs to work :)\cf0 \
\
\
\cf4   \{\
    "seperate_list": "['23.0', 'miles/hr', 'measured', 'in', 'marathons', 'per', 'fortnight']", \
    "analyze_str": "[number];[complex unit];[phrasing word];[unit, phrasing word];[unit];[per];[unit]", \
    "input_string": "23 miles/hr measured in marathons per fortnight"\
  \}, \cf0 \
\
[unit];[per];[unit] can easily be recognized as a complex unit!\
\
\cf4   \{\
    "input_string": "10e10meters, 10E10feet, 10^10miles, 10**10parsecs, -10.34^(-0.2343)c, -9123e(12)f", \
    "seperate_list": "['10000000000.0', 'meters', ',', '10000000000.0', 'feet', ',', '10000000000.0', 'miles', ',', '10000000000.0', 'parsecs', ',', '-0.5784926398045669', 'c', ',', '-3.323931753769712e+47', 'f']", \
    "analyze_str": "[number];[unit];[punctuation];[number];[unit];[punctuation];[number];[unit];[punctuation];[number];[unit];[punctuation];[number];[unit];[punctuation];[number];[unit]"\
  \}, \cf0 \
\
this i am proud of :)\
\
\
\
\
}